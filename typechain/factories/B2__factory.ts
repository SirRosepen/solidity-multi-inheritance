/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { B2, B2Interface } from "../B2";

const _abi = [
  {
    inputs: [],
    name: "numOpsA",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "numOpsB2",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060e48061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c806391ae9b6e14603757806395f53632146051575b600080fd5b603d606b565b60405160489190608b565b60405180910390f35b60576074565b60405160629190608b565b60405180910390f35b60008054905090565b6000600154905090565b60858160a4565b82525050565b6000602082019050609e6000830184607e565b92915050565b600081905091905056fea2646970667358221220c8ed698e0c9e0aea0f14fe69b827f44bd929cf3995883ca8b640390e810cf76d64736f6c63430008040033";

export class B2__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<B2> {
    return super.deploy(overrides || {}) as Promise<B2>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): B2 {
    return super.attach(address) as B2;
  }
  connect(signer: Signer): B2__factory {
    return super.connect(signer) as B2__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): B2Interface {
    return new utils.Interface(_abi) as B2Interface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): B2 {
    return new Contract(address, _abi, signerOrProvider) as B2;
  }
}
